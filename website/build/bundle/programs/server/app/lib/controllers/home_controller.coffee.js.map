{"version":3,"sources":["meteor://ðŸ’»app/lib/controllers/home_controller.coffee"],"names":[],"mappings":";;;;;;;;;AAAA,IAAC,eAAD,GAAkB,eAAe,CAAC,MAAhB,CAOhB;AAAA,iBAAe;WAEb,IAAC,UAAD,CAAW,YAAX,EAFa;EAAA,CAAf;AAAA,EASA,QAAQ,aATR;AAAA,EAiBA,MAAM,aAjBN;AAAA,EAqBA,OAAO;WAEL,IAAC,KAAD,GAFK;EAAA,CArBP;AAAA,EAyBA,SAAS;WAEP,IAAC,KAAD,GAFO;EAAA,CAzBT;AAAA,EA6BA,gBAAgB;AAGd,cAAU,CAAC,IAAX;WAmBA,IAAC,KAAD,GAtBc;EAAA,CA7BhB;AAAA,EA8DA,QAAQ;WAEN,IAAC,OAAD,GAFM;EAAA,CA9DR;AAAA,EAkEA,eAAe,aAlEf;AAAA,EAoEA,QAAQ,aApER;CAPgB,CAAlB","file":"/lib/controllers/home_controller.coffee.js","sourcesContent":["@HomeController = RouteController.extend(\n  \n  # A place to put your subscriptions\n  # this.subscribe('items');\n  # # add the subscription to the waitlist\n  # this.subscribe('item', this.params._id).wait();\n  \n  subscriptions: ->\n\n    @subscribe('allTargets')\n\n  # Subscriptions or other things we want to \"wait\" on. This also\n  # automatically uses the loading hook. That's the only difference between\n  # this option and the subscriptions option above.\n  # return Meteor.subscribe('post', this.params._id);\n  \n  waitOn: ->\n  \n  # A data function that can be used to automatically set the data context for\n  # our layout. This function can also be used by hooks and plugins. For\n  # example, the \"dataNotFound\" plugin calls this function to see if it\n  # returns a null value, and if so, renders the not found template.\n  # return Posts.findOne({_id: this.params._id});\n  \n  data: ->\n\n  # You can provide any of the hook options\n  \n  onRun: ->\n\n    @next()\n\n  onRerun: ->\n\n    @next()\n\n  onBeforeAction: ->\n\n    # We load GoogleMaps\n    GoogleMaps.load()\n\n    #random_id = Random.id()\n    #random_username = \"Anonymous #{random_id}\"\n    #random_email = \"anonymous#{random_id}@anonymous.com\"\n\n    # We create a temporary account\n    #Accounts.createUser {\n\n    #  username: random_username\n    #  email: random_email\n    #  password: 'anonymous'\n    #  profile: {name: 'Anonymous'}\n\n    #}, (errorUser) ->\n\n      #if !errorUser\n        # Nothing\n    \n    @next()\n\n\n  # The same thing as providing a function as the second parameter. You can\n  # also provide a string action name here which will be looked up on a Controller\n  # when the route runs. More on Controllers later. Note, the action function\n  # is optional. By default a route will render its template, layout and\n  # regions automatically.\n  # Example:\n  #  action: 'myActionFunction'\n  \n  action: ->\n\n    @render()\n\n  onAfterAction: ->\n\n  onStop: ->\n\n)\n"]}